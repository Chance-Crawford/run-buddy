

/* check google docs, css variables and attribute selectors*/
/* 
In VS Code, you can highlight the first instance of what you're looking for 
and press Ctrl+D (on Windows) or Command+D (on macOS) to continually select 
the next instance it finds. With multiple instances selected, you can type and 
replace them all at once. 
Highlight, press Ctrl+D multiple times until you reach the top of the 
stylesheet again, with all selected type var(<variable-name>). 
It will replace all instances of that value with the variable.
*/
:root {
    --primary-color: #fce138;
    --secondary-color: #024e76;
    --tertiary-color: #39a6b2;
  }

/* the universal selector, 
and it sets a style for all of the elements 
of an HTML page. */
* {
    /* browsers put padding and margin on many elements by default,
    this takes all of that off at the beginning */
    margin: 0;
    padding: 0;

    /* The border-box value calculates the height and 
    width of the element
     by including the border and padding additions 
     to the content box. Helps keep content from going
     off the screen*/
    box-sizing: border-box;
}


body {
    color: var(--tertiary-color);
    font-family: Helvetica, Arial, sans-serif;
    
}

/* header style */

header {
    /* padding top bottom, left right */
    padding: 20px 35px;
    background-color: var(--tertiary-color);
    /* check google docs css flexbox. This makes all direct child elements
    of the header (h1, nav) flex items in the header.
    Adding flexbox can override the behavior of block elements, and 
    display them side by side. overrides display property and changes direct 
    child elements to "flex"
    */
    display: flex;
    /* google docs css flexbox, this property can only be used when the
    display value of the element or parent element is flex.
    This property declaration puts all of the unused space in 
    the <header> between the two elements, with the space-between value. 
    It determines the unused space by adding up the border-width, margin, 
    padding, and content of each child element. If these don't add up to 100% 
    of the parent, then whatever is left over is considered unused.
    */
    justify-content: space-between;
    /* By default, the value of flex-wrap is set to none, so we need 
    to explicitly tell it to wrap to the next line if the screen width is smaller
    or the child elements are too big for the screen.

    This will cause the nav element to break to the next line on smaller screens, 
    but all the nav
    items break in weird places. We can change this in the nav ul element css
    */
    flex-wrap: wrap;
    /* Vendor prefix
    Before certain CSS properties become standard, browsers will sometimes 
    implement them in a more experimental capacity using a browser-specific 
    prefix, known as a vendor prefix. When the CSS feature is standardized, 
    later versions of the browser drop the prefix.
    
    For example, the border-radius property used to require vendor prefixes, 
    as shown in the following code:

    .rounded-corners {
    -webkit-border-radius: 10px;  old versions of chrome and safari 
    -moz-border-radius: 10px; old versions of firefox 
    border-radius: 10px;  standardized browsers 

    Until Safari joins the cool kids, we'll need to add a vendor prefix 
    to the sticky header to make sure it will be supported by that browser.

    Note that we put the prefixed version first in the CSS, and the 
    standardized version second. We should always put the standardized 
    version of a property at the end of a sequence of vendor-prefixed versions. 
    The browser will always apply the last version that it can interpret, 
    and if we list an earlier, experimental version of the property last in 
    the listing, then it would be used instead of the finalized version. 
    So for each property that requires vendor prefixes for cross-browser 
    compatibility, always put the prefixed versions before the finalized version.
  */
    position: -webkit-sticky;
    /* keeps header on top of page as you scroll. also in 
    google docs css properties
    */
    position: sticky;
    top: 0;

    background-image: url("../images/hero-bg.jpg");
    background-size: cover;
    /* places the image relative to the viewport instead of the element.
    were gonna use this so the header background image will line up perfectly with
    the .hero background image
    */
    background-attachment: fixed;
    background-position: 80%;
    /* 
    As soon as you give an HTML element positioning (relative, absolute, sticky), 
    stacking order comes into play.
    the header was the first element to receive positioning, so it sat on top. 
    Imagine, though, that when we gave the form elements positioning, those 
    pieces of paper were brought to the front and covered up the header. 
    Fortunately, with the z-index property, we can change this stacking order, 
    or reshuffle the papers, so to speak.
    This ensures that the header is the highest (layer) and nothing will go
    over it.
    Even z-index: 1; would have worked for this, but once we add z-index to other 
    elements it could get outdone, so we gave it a huge z-index just to be sure
    its on the highest layer.
    */
    z-index: 9999;
}

header h1 {
    font-weight: bold;
    font-size: 36px;
    color: var(--primary-color);
    margin: 0;
    /* check out google docs css properties for more info */
    text-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
}

header a {
    text-decoration: none;
    color: var(--primary-color);
}

header nav {
    margin: 7px 0;
}

header nav ul {
    /* makes the li items go side by side, turns into flex items,
    since they are direct children of the ul element
    */
    display: flex;
    /* if screen is small (mobile) wrap content to other line if needed */
    flex-wrap: wrap;
    justify-content: space-between;
    /* vertically center the content for smaller screens */
    align-items: center;
    /* The other property we added, list-style, sets how 
    a list item is styled (bullet points, dashes, etc.) and positioned 
    (indented or outdented). We gave it a value of none to hide 
    the bullet points, because we're changing some of the styles 
    for the <header>. These changes might make the bullet points visible, 
    which we don't want. 
    */
    list-style: none;
}

header nav ul li a {
    padding: 10px 15px;
    font-weight: lighter;
    /* vw stands for viewport width. Font size is determined by the width
    of the viewport. In this case we want the font size to be roughly
    1.55% of the windows overall width. This means that if the browser grows 
    or shrinks, that size will change relative to the new overall width.
    */
    font-size: 1.55vw;
    /* check out google docs css properties for more info */
    text-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
}

header nav ul li a:hover {
    background: var(--primary-color);
    color: var(--secondary-color);
    border-radius: 15px;
    text-shadow: none;
}
/* footer style */

footer {
    background: var(--primary-color);
    width: 100%;
    padding: 40px 35px;
    display: flex;
    justify-content: space-between;
    flex-wrap: wrap;
}

footer h2 {
    color: var(--secondary-color);
    font-size: 30px;
    margin: 0;
}

footer div {
    /* vertical space between lines of text */
    line-height: 1.5; 
    text-align: right;
}

footer a {
    color: var(--secondary-color);
}

section {
    padding: 60px;
}

/* Hero style start */
.hero {
    /* 
        The height property fixed at 600px gives an exact size 
        of the section, which is important in this context to allow 
        room for the sign-up form.

        height: 600px;
        REPLACED WITH FLEXBOX
        SEE HEADER CSS FOR FLEXBOX INFORMATION
        TAKES THE 2 DIRECT CHILD ELEMENTS THAT ARE BLOC ELEMENTS 
        AND DISPLAYS THEM SIDE BY SIDE
    */
    display: flex;
    /* 
        hero/jumbotron banner background. 
        uses the CSS function url() to link a resource such as an image, 
        web font, or GIF. Here we're using a relative URL path to select 
        a background image.
    */
    background-image: url(../images/hero-bg.jpg); 
    /* 
        The background-size property can set the size of the background 
        image to its original size or make it stretched, repeated, 
        or constrained to fit the available space. 
        In this case, we'll set it to cover to shrink the image so that parts
        of it won't get clipped.
    */
    background-size: cover;
    /* 
        The background-position property can set the initial position of 
        the background image. We'll set this position to center.
    */
    background-position: center;

    /* 
    To enable the absolute positioning of the form container to be taken 
    relative to the hero section, we need to make the hero section's 
    position relative.

    position: relative;
    REPLACED WITH FLEXBOX
    */

    /* We set justify-content to center because we want these two 
    boxes as close to the middle of the screen as possible.
    
    */
    justify-content: center;
    flex-wrap: wrap;
    align-items: flex-start;
    /* places the image relative to the viewport instead of the element.
    were gonna use this so the header background image will line up perfectly with
    the .hero background image
    */
    background-attachment: fixed;
    background-position: 80%;
    
}

/* Text next to form in hero, call to action */

.hero-cta {
    width: 35%;
    text-align: right;
    margin: 3.5%;
    color: #fff;
    font-size: 18px;
    line-height: 1.2;
}

.hero-cta h2 {
    font-style: italic;
    font-size: 55px;
    color: var(--primary-color);
    /* check out google docs css properties for more info */
    text-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
}

.hero-form {
    color: var(--secondary-color);
    /* set background color with opacity(alpha) of 80% */
    background-color: rgba(252, 225, 56, 0.8);
    width: 40%;
    margin: 3.5%;
    /* The padding property creates an inner margin within the border. */
    padding: 20px;
    border: solid 3px var(--secondary-color);
    /* rounded corners */
    border-radius: 15px;

    /* 
    If we choose relative, we'd need to move the form container from its 
    current position and offset it from the left and top positions until we 
    found the correct spot according to the mock-up. But if we choose absolute, 
    we can use the parent container's margins to offset horizontally or vertically. 
    We'll use this option because the position of the form container is in 
    relation to the hero container.

    Let's start by assuming we'd like to offset the form container from 
    the bottom and right margins of the hero section (because the form 
    container will reside in the bottom right quadrant of the hero section).
    Then we add pixels to offset it away from the bottom right.

    width: 600px;
    position: absolute;
    bottom: 120px;
    right: 140px;
    REPLACED WITH FLEXBOX
    */

    /* check out google docs css properties for more info */
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
    
}


/* Targets "Get started today" */
.hero-form h3 {
    font-size: 24px;
    margin: 0;
}

/* everything separated by p tags in hero form, adds more top and bottom 
space between them */
.hero-form p {
    margin: 5px 0 15px 0;
}

/* Affect the first 3 input boxes on the form */
.form-input {
    font-size: 16px;
    border: 1px solid var(--secondary-color);
    /* one on each line */
    display: block;
    /* give the box more space padding inside */
    padding: 7px 15px;
    color: var(--secondary-color);
    background-color: rgba(255,255,255, 0.75);
    /* Increases space between input box to element below it, also 
    increases parent's box size */
    margin-bottom: 15px;
    /* the inputs inherit margin from "section" selector above, thats why they dont
    touch the sides of the box when width = 100%. width percentage is 
    relative to the parent container's size */
    width: 100%;
    border-radius: 10px;
}

/* Using the :focus state pseudo class, we can also visually highlight the form 
input field that the user is currently typing in.
*/
.form-input:focus {
    background-color: rgba(255,255,255, 1);
    /* removes browser's default blue outline when element is clicked */
    outline: none;
}

/* makes default radio button and checkbox invisible so we can change the way they 
look. Even though they are invisible, screen readers will still recognize that 
they are still there, but visually, there will be a different looking
radio button and checkbox on top of the invisible pre-existing ones
*/
.checkbox-wrapper input, .radio-wrapper input {
    opacity: 0;
}

/*
The default checkboxes and radio buttons are still there, we just made 
them invisible now.  Our new checkboxes and radio buttons are place over them. 

The label is also connected to the input bottons, so whenever that area is 
clicked, it still activates the regular buttons.

Our fake buttons are just for show, but we still want to toggle the ::after
copntent to show they have been checked or not, we will do this by tying
it to the actual checkbox and radio button's checked and default states. 

If the radio buttons or checkboxes are in their default state, they'll have 
no ::after pseudo content
*/

.checkbox-wrapper input + label::after, 
.radio-wrapper input + label::after {
  content: none;
}
/* 
See comment above. 
As soon as an input becomes :checked, however, the content and all of 
the other styles defined earlier will take effect.
*/
.checkbox-wrapper input:checked + label::after, 
.radio-wrapper input:checked + label::after {
  content: "";
}

/* labels above input fields in the form */
.hero-form label {
    margin: 0 5px;
}

/* prep labels on form so new radio and checkbox can fit inside */
.checkbox-wrapper label, .radio-wrapper label {
    /* so we can move it slightly from its static position.
    and so we can position the radio and checkbox absolutely
    */
    position: relative;
    left: 10px;
    margin: 10px;
    line-height: 1.6;
}

/* 
The ::before pseudo-element lets us inject content into an element using 
CSS! It places this content before everything else that currently resides 
in the element.
Here, we left the actual content property empty but used additional CSS 
properties to create a white square with a blue border. We then used 
absolute positioning to move this box on top of the invisible, original 
input element.
*/
.checkbox-wrapper label::before, .radio-wrapper label::before {
    content: "";
    height: 20px;
    width: 20px;
    background: rgba(255, 255, 255, 0.75);
    border: 1px solid var(--secondary-color);
    position: absolute;
    top: -4px;
    left: -30px;
}

/* In the above rule, we unfortunately made the radio buttons square. 
here we correct that and make them circles
*/
.radio-wrapper label::before {
    border-radius: 50%;
}

/* Next, we need to define how the buttons display when checked, or clicked. 
To do this, we'll need another pseudo-element to overlay on top of the first one. 
We can't have two ::before pseudo-elements in the same place, but we can use 
the ::after pseudo-element
*/
.radio-wrapper label::after {
    content: "";
    width: 20px;
    height: 20px;
    border-radius: 50%;
    /* gives the radio button checked, a nice gradiant instead of solid color */
    background-image: radial-gradient(circle, var(--tertiary-color), var(--secondary-color));
    /* when absolute, item goes to the top-left corner of the relative parent */
    position: absolute;
    left: -29px;
    top: -3px;
}

.checkbox-wrapper label::after {
    content: "";
    height: 6px;
    width: 14px;
    border-left: 2px solid var(--secondary-color);
    border-bottom: 2px solid var(--secondary-color);
    position: absolute;
    left: -26px;
    top: 1px;
    /* rotates the weird borders above to look like a checkmark */
    transform: rotate(-58deg);
}

/* Get running submit button */
.hero-form button {
    background-color: var(--secondary-color);
    color: var(--primary-color);
    border: none;
    padding: 10px 20px;
    font-size: 16px;
    border-radius: 10px;
}

.hero-form button:hover {
    background-color: var(--tertiary-color);
}

/* what we do section */




.intro p {
  line-height: 1.7;
  color: var(--tertiary-color);
  width: 80%;
  font-size: 20px;
  /* centers an element with a width less than 100% 
  automatically on the left and right. Essentially, it tells the 
  browser to calculate the margins for us. When the browser is asked 
  to do this on both sides of an element, it will do its best to make 
  them even, thus pushing the element into the center. */
  margin: 0 auto;
  text-align: center;
}

/* what you do section */

/* container that incapsulates all of the steps */
.steps {
    background: var(--primary-color);
}

/* each individual step box. step 1-4 */
.step {
    margin: 50px auto;
    padding-bottom: 50px;
    width: 80%;
    border-bottom: 1px solid var(--tertiary-color);
    /* turns step name h3, and step-info div into flex items. 
    Those are the 2 direct children of step.
    */
    display: flex;
    flex-wrap: wrap;
    /* Step h3 is now vertically in the center of the box.
    if align items was default, the "step 1 or step 2..."
    would be at the top of the box.
    */
    align-items: center;
    /* empty space from the 80% width is now put between the children.
    h3 and step-info 
    */
    justify-content: space-between;

}

/* The .step:last-child selector pseudo class means that 
the CSS declarations will only 
apply to an element with class step that's also the last element in 
whatever container it's in. 

In this case, it takes off the bottom border from the last child.
*/
.step:last-child {
    border-bottom: none;
}

.step h3 {
  color: var(--secondary-color);
  font-size: 46px;
  /* see google docs flexbox */
  /* The value we provided to the step's flexbox children uses 
  the <flex-grow value> <flex-basis value> syntax, meaning 
  that .step h3 will be at least 30% wide and will receive any extra 
  space in the container. Also, .step-info will be at least 70% wide 
  but will receive any extra space in the container at a 2-to-1 ratio. 
  In other words, it will receive two more units of unused space than a 
  sibling with a flex-grow value of 1.

  */
  flex: 1 30%;
}

.step-info{
    /* see google docs flexbox */
    /* The value we provided to the step's flexbox children uses 
    the <flex-grow value> <flex-basis value> syntax, meaning 
    that .step h3 will be at least 30% wide and will receive any extra 
    space in the container. Also, .step-info will be at least 70% wide 
    but will receive any extra space in the container at a 2-to-1 ratio. 
    In other words, it will receive two more units of unused space than a 
    sibling with a flex-grow value of 1 
    */
    flex: 2 70%;
    display: flex;
    flex-wrap: wrap;
    align-items: center;
}

.step-img {
    flex: 1 12%;
    margin-right: 20px;
}

.step-text {
    /* Now the child elements have a flex-grow property of 1 and 12, 
    respectively. This means that .step-text will be 
    allotted 12 times more unused space than .step-img, but .step-img 
    at the very least must be 12 percent of the width of .step-info.
    You usually comne across good proportion values by trial and error
    in Chrome's DevTools
    */
    flex: 12;
}

.step-img img {
    /* One last thing we need to do is tell the <img> element to limit 
    its width to be whatever its container is (step-img). This isn't a 
    problem with most browsers, but Microsoft Edge can be a little buggy 
    with it, so it's always worth putting in a little extra to have a 
    uniform design across browsers. 
    */
    max-width: 100%;
}

.step-text h4 {
    font-size: 26px;
    line-height: 1.5;
    color: var(--secondary-color);
}

.step-text p {
  color: var(--tertiary-color);
  font-size: 18px;
}


/* can be used for all h2 headings such as what you do and what we do */
.section-title {
    font-size: 48px;
    color: var(--secondary-color);
    border-bottom: 3px solid;
    /* We chose to use the inline-block value instead of the inline 
    value so it can have the best of both worlds. It's now an inline element, 
    but things like padding still behave like they would on block elements. 
    Coupled with the text-align property from before, we now have a 
    center-aligned heading with an appropriately sized bottom border that 
    doesnt take up the whole width

    display: inline-block;
    margin-bottom: 35px;
    padding: 0 100px 20px 100px;
    REPLACED WITH FLEXBOX
    */

    /* center section titles and adjust margin and padding  */
    padding-bottom: 20px;
    text-align: center;
    margin: 0 auto 35px auto;
    width: 50%;
    
}

/* border color below h2 headings */
.primary-border {
    border-color: var(--primary-color);
}

.secondary-border {
    border-color: var(--tertiary-color);
}

/* meet the trainers section */

/* Container that incapsulates all trainer cards */
.trainers {
    width: 100%;
    margin: 0 auto;
    /* turns trainer cards into flex itema in a row */
    display: flex;
    flex-wrap: wrap;
    justify-content: space-around;
}

/* individual article element per trainer */
.trainer {
    margin: 20px;
    background: var(--secondary-color);
    color: var(--primary-color);
    /* We've used floats before to manipulate a page's default "flow," but in those cases we only floated one element. When we floated the <nav> element inside the <header>, the <header> lost its ability to interpret how much room the <nav> element needed. This was okay, though, because the <header> still was able to interpret how much space the <h1> element needed because it wasn't floated and the <header> displayed at the correct size.

In this case, however, we floated both elements (the <img> and <div>). This meant that the parent element—the <article> element—couldn't interpret how much space its inner HTML content needed and thus assumed there was nothing inside it. This caused the <article> element's styles to not display, because the <article> element itself is 0px tall.

This a common issue for float-based layouts. It involves not only moving the elements we want to move, but also tweaking surrounding elements to account for other floated elements. There are a few ways to fix this problem—we chose the overflow property. 

The overflow property told the trainer's <article> element that it does in fact have content inside it, and that it needs to look for it and account for those two floated HTML elements' sizes. This is known as providing block formatting context to the element.

overflow: auto;
REPLACED WITH FLEXBOX
*/

/* all trainers are placed 1 to 1 to 1. share the space as equally as possible */
flex: 1;
}

.trainer img {
    width: 100%; 
}

.trainer-bio {
    padding: 25px;
    line-height: 1.3;
}



.trainer-bio h3 {
    font-size: 28px;
}

.trainer-bio h4 {
    font-weight: lighter;
    font-size: 22px;
    margin-bottom: 15px;
}

.trainer-bio p {
    font-size: 17px;
}

/* reach out section */

.contact {
    background: var(--secondary-color);
}

.contact h2 {
    color: var(--primary-color);
}

/* Container incapsulating all maps and contact info in reaach out */
.contact-info {
    display: flex;
    justify-content: space-between;
    flex-wrap: wrap;
}

/* Here, the * selector is saying "select all elements that are 
direct children of anything with a class of contact-info." The > symbol 
means it's looking specifically for direct children of the element.

We are doing this because we want to space the elements within the contact-info
flexbox evenly. But the elements within contact-info are all different element types.
So instaed of giving them all the same class, we targeted them all this way.
In this case, we are applying all the styles within the brackets to the 3
elements that are the direct children of contact-info.
*/
.contact-info > * {
    /* makes all direct children share the space equally */
    flex: 1;
    margin: 15px;
}

.contact-info iframe {
    height: 400px;
}

/* div inside of contact info (the address text) */
.contact-info div {
    color: white;
}

.contact-info h3 {
    color: var(--primary-color);
    font-size: 32px;
}

/* targets 2 different selectors and gives them the same attributes */
.contact-info p, .contact-info address {
    margin: 20px 0;
    line-height: 1.5;
    font-size: 16px;
    /* since by default, address elements italicize the text */
    font-style: normal;
}

.contact-form input, .contact-form textarea {
    border: 1px solid var(--secondary-color);
    display: block;
    padding: 7px 15px;
    font-size: 16px;
    color: var(--secondary-color);
    width: 100%;
    margin-bottom: 15px;
    margin-top: 5px;
    border-radius: 10px;
    background: rgba(255, 255, 255, 0.8);
}

.contact-form input:focus, .contact-form textarea:focus {
    background: white;
}

.contact-form button {
    width: 100%;
    border: none;
    background: var(--primary-color);
    color: var(--secondary-color);
    text-align: center;
    padding: 15px 0;
    font-size: 16px;
    border-radius: 10px;
}

.contact-form button:hover {
    color: var(--primary-color);
    background: var(--tertiary-color);
}

.contact-info a {
    color: var(--primary-color);
}

/* Utility classes */

.text-left {
    text-align: left;
}

.text-right {
    text-align: right;
}

.flex-row {
    display: flex;
}

/* Media Queries */

/* more info can be found in google docs, media queries */

/* MEDIA QUERY FOR SMALLER DESKTOP SCREENS AND SMALLER */
@media screen and (max-width: 980px) {
    header {
        padding-bottom: 0;
        justify-content: center;
        /* To undo sticky header for smaller devices,
        since it takes up too much space
        */
        position: relative;
    }

    header h1 {
        /* forces links to go beneath h1 */
        width: 100%;
        text-align: center;
    }

    header nav ul {
        margin-top: 20px;
        width: 100%;
        justify-content: center;
    }

    header nav ul li a {
        font-size: 20px;
    }

    footer h2, footer div {
        text-align: center;
        /* each take up their own line as if they are block elements
        (even though they have a display value of flex and are flex items)
        */
        /* 
        Because both the <header> and <footer> elements are flex containers, 
        we only had to tell both of their children to be 100% of the width. 
        Because flex-wrap is turned on to wrap overflowing content, it allows 
        both children to get their own row one on top of the other. The only 
        thing we need to do then is adjust their justification properties to 
        center them on the page, and adjust some font sizes and spacing to 
        tighten up the design.
        */
        width: 100%;
    }

    .hero-cta, .hero-form {
        /* refer to comment above */
        width: 100%;
    }

    .hero-cta {
        text-align: center;
    }

    .section-title {
        width: 80%;
    }

    .trainer {
        /* Do not grow to fill unused space, but be at least 70% of the
        width of the container.
        */
        flex: 0 70%;
    }

    .contact-info iframe {
        /* so that the first two elements in reach out section
        can share a row with more space and the 
        map gets pushed down and gets its own row, 
        creating a more unique layout than the others.
        */
        flex: 1 100%;
    }


  }
  

  /* MEDIA QUERY FOR TABLETS AND SMALLER */
  /* Before altering anything, this section looks pretty good due to
  the media query above it making more suitable adjustments for smaller screens.
  but there are still a few changes that can be made.
  */
  @media screen and (max-width: 768px) {
    /* gives "what you do" section some breathing room */
    section {
        padding: 30px 15px;
    }

    /* each step of "what you do" */
    .step h3 {
        flex: 1 100%;
        text-align: center;
    }

    /* the icon and words of "what you do" section */
    .step-info {
        flex: 2 100%;
        text-align: center;
        justify-content: center;
    }

    /* icons */
    .step-img {
        /* dont grow, but be at least 32% of width*/
        flex: 0 32%;
        margin-right: 0;
        margin-top: 15px;
        margin-bottom: 15px;
    }

    .step-text {
        /* text gets its own line below image */
        flex: 100%;
    }

  }
  

  /* MEDIA QUERY FOR MOBILE PHONES AND SMALLER */
  /* For the 575px width breakpoint, we really only need to 
  tackle a few aesthetic updates and fix the "Reach Out" section to read a 
  little bit better.  */
  @media screen and (max-width: 575px) {

    .hero-form button {
        width: 100%;
    }

    .section-title {
        width: 95%;
    }

    /* text right under "what we do" */
    .intro p {
        width: 100%;
    }

    /* make trainer cards 100% of width (minus padding on outside) */
    .trainer {
        flex: 0 100%;
    }

    /* center all text in "reach out" section */
    .contact-info {
        text-align: center;
    }

    /* make all direct children of contact-info in reach out each 
    have their own line */
    .contact-info > * {
        flex: 0 100%;
    }

    .contact-form {
        /* The order property can rearrange how child elements appear on 
        a page without moving the HTML. This works because at this screen size
        we want the contact form to be after the map.
        */
        order: 3;
    }

  }